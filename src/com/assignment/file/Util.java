package com.assignment.file;

import java.io.*;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;

public class Util {
    /**
     * Get byte array of files based on path
     *
     * @param path
     * @return
     */
    public static byte[] getFileByte(String path) {
        FileChannel fc = null;
        byte[] result = null;
        try {
            fc = new RandomAccessFile(path, "r").getChannel();
            MappedByteBuffer byteBuffer = fc.map(FileChannel.MapMode.READ_ONLY, 0,
                    fc.size()).load();
            result = new byte[(int) fc.size()];
            if (byteBuffer.remaining() > 0) {
                byteBuffer.get(result, 0, byteBuffer.remaining());
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                fc.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return result;
    }


    // write the string into file
    public static void writeIntoFile(String filePath, String baseEncryptedFile) {
        try {
            File f = new File(filePath);
            // create a new file either the file existed or not
            f.createNewFile();
            FileWriter fw = new FileWriter(filePath, true);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.append(baseEncryptedFile);
            bw.close();
            fw.close();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    // read string from file
    public static String readFromFile(File file){
        int len=0;
        StringBuffer str = new StringBuffer("");
        try {
            FileInputStream fis =new FileInputStream(file);
            InputStreamReader isr = new InputStreamReader(fis);
            BufferedReader br = new BufferedReader(isr);
            String line = null;
            while( (line = br.readLine())!=null ) {
                // 处理换行符的问题
                if(len != 0)  {
                    str.append("\r\n" + line);
                }
                else{
                    str.append(line);
                }
                len++;
            }
            br.close();
            fis.close();
        } catch (IOException e) {
            // TODO Autogenerated catch block
            e.printStackTrace();
        }
        return str.toString();
    }

    /**
     * Generate files based on byte arrays
     */
    public static void generateFile(byte[] bfile, String filePath, String fileName) {
        BufferedOutputStream bos = null;
        FileOutputStream fos = null;
        File file = null;
        try {
            File dir = new File(filePath);
            // Determine if the file directory exists; if not, make a new directory
            if (!dir.exists() && dir.isDirectory()) {
                dir.mkdirs();
            }
            file = new File(filePath + "\\" + fileName);
            bos = new BufferedOutputStream(new FileOutputStream(file));

            bos.write(bfile);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (bos != null) {
                try {
                    bos.close();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        }
    }

    /**
     * Convert binary to decimal byte type
     *
     * @param data
     * @return
     */
    public static byte[] binaryIntArrayToInt(int[] data) {
        int i;
        int j;
        byte[] value = new byte[8];
        for (i = 0; i < 8; i++) {
            for (j = 0; j < 8; j++) {
                value[i] += (data[(i << 3) + j] << (7 - j));
            }
        }
        for (i = 0; i < 8; i++) {
            value[i] %= 256;
            if (value[i] > 128) {
                value[i] -= 255;
            }
        }
        return value;
    }

    /**
     * Convert data to binary shaped arrays
     *
     * @param inti_data: data to be converted into shaped arrays
     * @return
     */
    public static int[] readDataToBinaryIntArray(byte[] inti_data) {
        int i;
        int j;
        int[] IntDa = new int[8];
        int[] IntVa = new int[64];
        // Convert data to binary numbers and store them in arrays
        for (i = 0; i < 8; i++) {
            IntDa[i] = inti_data[i];
            if (IntDa[i] < 0) {
                IntDa[i] += 256;
                IntDa[i] %= 256;
            }
        }
        // The way to divide by 2
        for (i = 0; i < 8; i++) {
            for (j = 0; j < 8; j++) {
                IntVa[((i * 8) + 7) - j] = IntDa[i] % 2;
                IntDa[i] = IntDa[i] / 2;
            }
        }
        return IntVa;
    }
}
